#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>
#include <limits>

using namespace std;

const int INF = numeric_limits<int>::max();

struct Edge {
    int node;
    int cost;
};

struct Node {
    int id;
    int f_cost; // f(n) = g(n) + h(n)
    
    bool operator>(const Node& other) const {
        return f_cost > other.f_cost; // For min-heap
    }
};

void add_edge(unordered_map<int, vector<Edge>>& graph, int u, int v, int cost) {
    graph[u].push_back({v, cost});
}

int a_star(const unordered_map<int, vector<Edge>>& graph, int start, int goal, const unordered_map<int, int>& heuristic) {
    unordered_map<int, int> g_cost;
    for (const auto& [node, _] : graph) {
        g_cost[node] = INF;
    }
    g_cost[start] = 0;

    priority_queue<Node, vector<Node>, greater<Node>> pq;
    pq.push({start, heuristic.at(start)});

    unordered_map<int, int> came_from;

    while (!pq.empty()) {
        Node current = pq.top();
        pq.pop();

        if (current.id == goal) {
            return g_cost[goal];
        }

        for (const Edge& neighbor : graph.at(current.id)) {
            int tentative_g_cost = g_cost[current.id] + neighbor.cost;

            if (tentative_g_cost < g_cost[neighbor.node]) {
                g_cost[neighbor.node] = tentative_g_cost;
                int f_cost = tentative_g_cost + heuristic.at(neighbor.node);
                pq.push({neighbor.node, f_cost});
                came_from[neighbor.node] = current.id;
            }
        }
    }

    return INF; // If no path is found
}

int main() {
    unordered_map<int, vector<Edge>> graph;

    add_edge(graph, 0, 1, 1);
    add_edge(graph, 0, 2, 4);
    add_edge(graph, 1, 2, 2);
    add_edge(graph, 1, 3, 5);
    add_edge(graph, 2, 3, 1);

    unordered_map<int, int> heuristic = {{0, 7}, {1, 6}, {2, 2}, {3, 0}}; // Example heuristic values

    int start = 0, goal = 3;

    int result = a_star(graph, start, goal, heuristic);

    if (result != INF) {
        cout << "Shortest path cost: " << result << endl;
    } else {
        cout << "No path found." << endl;
    }

    return 0;
}
